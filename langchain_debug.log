Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='Submitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='all corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='Page 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='disease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='leaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='Precision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='required. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='detect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='networks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='BAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='not reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Automatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='plant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='last layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='several applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='GPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='You can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations,'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='networks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='computations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='we define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='in 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='[3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022)')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='Submitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='all corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='Page 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='disease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='leaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='Precision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='required. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='detect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='networks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='BAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='not reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Automatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='plant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='last layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='several applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='GPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='You can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations,'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='networks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='computations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='we define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='in 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='[3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022)')]
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x000001894F1E5FD0>
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x000001894F1E5FD0>
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001894EE6CA50>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001894EE642D0>, root_client=<openai.OpenAI object at 0x000001894EE18E10>, root_async_client=<openai.AsyncOpenAI object at 0x000001894EE6CB90>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001894EE6CA50>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001894EE642D0>, root_client=<openai.OpenAI object at 0x000001894EE18E10>, root_async_client=<openai.AsyncOpenAI object at 0x000001894EE6CB90>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x000001894F1E5FD0>, search_kwargs={})
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001894EE6CA50>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001894EE642D0>, root_client=<openai.OpenAI object at 0x000001894EE18E10>, root_async_client=<openai.AsyncOpenAI object at 0x000001894EE6CB90>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001894EE6CA50>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001894EE642D0>, root_client=<openai.OpenAI object at 0x000001894EE18E10>, root_async_client=<openai.AsyncOpenAI object at 0x000001894EE6CB90>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x000001894F1E5FD0>, search_kwargs={})
Query Result: {'answer': 'The submitters of the project are:\n1. Tejas M P (USN: 2SD17CS108)\n2. Manoj C Naik (USN: 2SD17CS044)\n3. Prashant Kalli (USN: 2SD17CS066)\n4. Rahul A (USN: 2SD17CS072)\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Query Result: {'answer': 'The submitters of the project are:\n1. Tejas M P (USN: 2SD17CS108)\n2. Manoj C Naik (USN: 2SD17CS044)\n3. Prashant Kalli (USN: 2SD17CS066)\n4. Rahul A (USN: 2SD17CS072)\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Query Result: {'answer': 'The submitters of the project are:\n1. Tejas M P (USN: 2SD17CS108)\n2. Manoj C Naik (USN: 2SD17CS044)\n3. Prashant Kalli (USN: 2SD17CS066)\n4. Rahul A (USN: 2SD17CS072)\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='Submitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='all corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='Page 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='disease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='leaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='Precision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='required. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='detect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='networks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='BAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='not reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Automatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='plant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='last layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='several applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='GPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='You can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations,'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='networks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='computations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='we define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='in 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='[3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022)')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='Submitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='all corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='Page 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='disease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='leaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='Precision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='required. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='detect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='networks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='BAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='not reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Automatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='plant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='last layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='several applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='GPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='You can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations,'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='networks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='computations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='we define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='in 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='[3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022)')]
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x000001D8D9832510>
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x000001D8D9832510>
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001D8D94ACA50>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001D8D94A42D0>, root_client=<openai.OpenAI object at 0x000001D8D9460E10>, root_async_client=<openai.AsyncOpenAI object at 0x000001D8D94ACB90>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001D8D94ACA50>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001D8D94A42D0>, root_client=<openai.OpenAI object at 0x000001D8D9460E10>, root_async_client=<openai.AsyncOpenAI object at 0x000001D8D94ACB90>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x000001D8D9832510>, search_kwargs={})
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001D8D94ACA50>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001D8D94A42D0>, root_client=<openai.OpenAI object at 0x000001D8D9460E10>, root_async_client=<openai.AsyncOpenAI object at 0x000001D8D94ACB90>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001D8D94ACA50>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001D8D94A42D0>, root_client=<openai.OpenAI object at 0x000001D8D9460E10>, root_async_client=<openai.AsyncOpenAI object at 0x000001D8D94ACB90>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x000001D8D9832510>, search_kwargs={})
Query Result: {'answer': 'The provided text does not contain any specific information regarding the summary of the project. It primarily discusses the approval of the project and mentions corrections and suggestions incorporated into the report, as well as details about the project guide and external viva process. Therefore, I cannot provide a summary of the project.\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Query Result: {'answer': 'The provided text does not contain any specific information regarding the summary of the project. It primarily discusses the approval of the project and mentions corrections and suggestions incorporated into the report, as well as details about the project guide and external viva process. Therefore, I cannot provide a summary of the project.\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Query Result: {'answer': 'The provided text does not contain any specific information regarding the summary of the project. It primarily discusses the approval of the project and mentions corrections and suggestions incorporated into the report, as well as details about the project guide and external viva process. Therefore, I cannot provide a summary of the project.\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='Submitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='all corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='Page 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='disease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='leaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='Precision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='required. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='detect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='networks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='BAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='not reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Automatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='plant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='last layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='several applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='GPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='You can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations,'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='networks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='computations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='we define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='in 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='[3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022)')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='Submitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='all corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='Page 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='disease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='leaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='Precision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='required. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='detect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='networks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='BAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='not reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Automatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='plant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='last layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='several applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='GPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='You can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations,'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='networks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='computations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='we define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='in 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='[3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022)')]
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Number of pages loaded: 19
Number of pages loaded: 19
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='Submitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='all corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='Page 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='disease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='leaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='Precision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='required. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='detect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='networks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='BAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='not reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Automatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='plant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='last layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='several applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='GPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='You can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations,'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='networks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='computations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='we define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='in 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='[3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022)')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content='Submitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content='all corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='Page 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='disease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content='leaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='Precision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='required. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='detect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='networks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='BAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='not reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='Automatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='plant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='last layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='several applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='GPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='You can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations,'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content="- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow's model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='networks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='computations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='we define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='in 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output:'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='[3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al.'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022)')]
Old FAISS index directory removed.
Old FAISS index directory removed.
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x000001DB0E57E510>
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x000001DB0E57E510>
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001DB0E1F16D0>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001DB0E1D4F50>, root_client=<openai.OpenAI object at 0x000001DB0E199A90>, root_async_client=<openai.AsyncOpenAI object at 0x000001DB0E1F1810>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001DB0E1F16D0>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001DB0E1D4F50>, root_client=<openai.OpenAI object at 0x000001DB0E199A90>, root_async_client=<openai.AsyncOpenAI object at 0x000001DB0E1F1810>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x000001DB0E57E510>, search_kwargs={})
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001DB0E1F16D0>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001DB0E1D4F50>, root_client=<openai.OpenAI object at 0x000001DB0E199A90>, root_async_client=<openai.AsyncOpenAI object at 0x000001DB0E1F1810>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x000001DB0E1F16D0>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x000001DB0E1D4F50>, root_client=<openai.OpenAI object at 0x000001DB0E199A90>, root_async_client=<openai.AsyncOpenAI object at 0x000001DB0E1F1810>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x000001DB0E57E510>, search_kwargs={})
Query Result: {'answer': "I don't know.  \n", 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Query Result: {'answer': "I don't know.  \n", 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Query Result: {'answer': "I don't know.  \n", 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Number of pages loaded: 19
Number of pages loaded: 19
Cleaned text:  VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the aw
Cleaned text:  VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the aw
Documents after splitting: [Document(metadata={}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease'), Document(metadata={}, page_content='. With the worldwide increase in digital cameras and continuous improvements in computer vision domain, the automated techniques for detection of disease are highly in demands in precision agriculture. Working on a dataset w hich includes images of crop leaves, a Residual Network was trained to perform this task of classification, The proposed ResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the proposed model'), Document(metadata={}, page_content='. Overall the process of tra ining ResNet models on an open image dataset provides a sound way towards crop disease detection using automated networks on an enormous global scale. Providing the user -friendly website for leaf disease detection to farmers  PLANT LEAF DISEASE DETECTION  Table of Contents PROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 CHAPTER 1: INTRODUCTION ..........'), Document(metadata={}, page_content='... ......... 3 CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................ 4 CHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ ..................... 5 CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ..........................'), Document(metadata={}, page_content='....................... ........................... 6 CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ ............................. 9 CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................ 10 CHAPTER 6: RESULTS ................................ ................................ ................................ ................................ ...'), Document(metadata={}, page_content='............. ................................ .......... 14 REFERENCES ................................ ................................ ................................ ................................ ........................'), Document(metadata={}, page_content='......................... ......................... 17  PLANT LEAF DISEASE DETECTION  PROBLEM STATEMENT Plant Leaf Disease Detection using PyTorch and Deep Learning  PLANT LEAF DISEASE DETECTION  CHAPTER 1: INTRODUCTION In agricultural crops, leaves play a vital role to provide information about the amount and nature of horticultural yield. Several factors affect food production such as climate change, presence of weed, and soil infertility'), Document(metadata={}, page_content='. Apart from that, plant or leaf disease is a global threat to the growth of several agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus in plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been largely considered in the scientific community, with a focus on the biological features of diseases. Precision farming uses the most advanced technology for the optimization of decision -making'), Document(metadata={}, page_content='. The visual inspections by experts and biological review are usually carried out through plant diagnosis when required. This method, however, is typically time -consuming and cost ineffective. To address these issues, it is necessary to detect plant diseases by advanced and intelligent techniques As a solution to this problem, we have devised a system that uses deep learning to analyze, detect and classify any disease that might have affected a plant by taking an image of the leaf'), Document(metadata={}, page_content='. The processing pipeline goes as follows: 1. The leaf is detected in the given image and cropped out 2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to 3. The leaf is then checked for the disease class, if any, based on the result it displays  PLANT LEAF DISEASE DETECTION  CHAPTER 2: LITERATURE SURVEY Kaiming He et al., (2015) Proposed on " Deep Residual Learning for Image Recognition " Deeper neural networks are more difficult to train'), Document(metadata={}, page_content='. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth'), Document(metadata={}, page_content='. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. BAOQI LI et al'), Document(metadata={}, page_content='. BAOQI LI et al.,( 2018), proposed work on "An Improved ResNet Based on the Adjustable Shortcut Connections" In this paper, ResNet can achieve deeper network and higher performance, but there is no good explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is not reasonable to adopt identity mapping for all layer parameters'), Document(metadata={}, page_content='. In this paper, we first establish a simplified ResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. Heechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and localization methods using real traffic surveillance recordings'), Document(metadata={}, page_content='. We utilize a MIOvision traffic dataset, which comprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on. Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification Based on CNN " early detection of diseases is important in agriculture for an efficient crop yield. bacterial spot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes'), Document(metadata={}, page_content='. Automatic methods for classification of plant diseases also help taking action after detecting the symptoms of leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector Quantization (LVQ) algorithm base method for tomato leaf disease detection and classification. dataset contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for automatic feature extraction and classification'), Document(metadata={}, page_content='. Color information is actively used for plant leaf disease researches. In our model, the filters are applied to three channels based on RGB components.  PLANT LEAF DISEASE DETECTION  CHAPTER 3: DETAILED DESIGN 3.1: ARCHITECTURE DIAGRAM: Architecture Diagram Description: 1.Data set: We have collected a Data set having different plants and its variety of diseases for each plant along with the healthy leaf images 2'), Document(metadata={}, page_content='.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation data set respectively. 3'), Document(metadata={}, page_content='. 3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks. 4'), Document(metadata={}, page_content='. 4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is used to check how much the model is learned from training data set and to finding the accuracy of predicting the input image. 5.input image is converted into array and passed to the model having resnet architecture which has been trained by the data set and get predictions from the model, picks index with highest probability and prints the class label  PLANT LEAF DISEASE DETECTION  3'), Document(metadata={}, page_content='.2: ResNet ARCHITECTURE: ResNet Architecture  PLANT LEAF DISEASE DETECTION  Description: Since neural networks are good function approximators, they should be able to easily solve the identify function, where the output of a function becomes the input itself'), Document(metadata={}, page_content='. F(x)=x Following the same logic, if we bypass the input to the first layer of the model to be the output of the last layer of the model, the network should be able to predict whatever function it was learning before with the input added to it. F(x) + x = h(x) One of the problems ResNets solve is the famous known vanishing gradient'), Document(metadata={}, page_content='. This is because when the network is too deep, the gradients from where the loss function is calculated easily shrink to zero after several applications of the chain rule. This result on the weights never updating its values and therefore, no learning is being performed. With ResNets, the gradients can flow directly through the skip connections backwards from later layers to initial filters. 3'), Document(metadata={}, page_content='. 3.1: USECASE DIAGRAM: Use Case -Diagram  PLANT LEAF DISEASE DETECTION  CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS 4.1 -Functional Requirements : \uf0b7 User Level: 1. User shall be able to input test data (image). 2. User shall be able to perform analysis after the results. 3. User shall be able to train the data if required. 4. User shall be able to view the result \uf0b7 System Level: 1. System should provide option to input the test image. 2. System should provide option to display results. 3'), Document(metadata={}, page_content='. 3. System should accept the input. 4. System should predict the output. 5. System should display result. 6. System should provide the option for user’s to retrain. 4.2-Nonfunctional Requirements: 1.Portability: The program should be platform Independent 2.Usability: The system should be easy to deal and simple to understand 3.Speed and Response: Execution of the operations must be in seconds 4.Flexibility: The system should be easy to modify 5'), Document(metadata={}, page_content='.Accuracy and Precision : The system should perform its process with accuracy and precision to avoid problems 4.3- Software and Hardware Requirements: 1. A computer with at least 2 virtual core processor, at least 4 GB RAM, ideally having a dedicated GPU. 2. Any of these Python IDLE -Jupiter Notebook, Pycharm with Pre-installed necessary libraries and modules. 3. Google Colab to design these models.  PLANT LEAF DISEASE DETECTION  CHAPTER 5: IMPLEMENTATION 5.1 INCORPORATED PACKAGE: 5.1'), Document(metadata={}, page_content='.1 INCORPORATED PACKAGE: 5.1.1: Pytorch : -PyTorch is a python package that provides two high-level features: - Tensor computation (like numpy) with strong GPU acceleration - Deep Neural Networks built on a tape-based autograd system You can reuse your favorite python packages such as numpy, scipy and Cython to extend PyTorch when needed. -Usually one uses PyTorch either as: - A replacement for numpy to use the power of GPUs'), Document(metadata={}, page_content=". - a deep learning research platform that provides maximum flexibility and speed -It provides a wide variety of tensor routines to accelerate and fit your scientific computation needs such as slicing, indexing, math operations, linear algebra, reductions. And they are fast 5.1.2: torchsummary: - Torch-summary provides information complementary to what is provided by print(your model) in PyTorch, similar to Tensorflow's model"), Document(metadata={}, page_content='.summary() API to view the visualization of the model, which is helpful while debugging your network. In this project, we implement a similar functionality in PyTorch and create a clean, simple interface to use in your projects. 5.1.3: Matplotlib.pyplot: -Matplotlib is a plotting library for the Python programming language and its numericalmathematics extension NumPy'), Document(metadata={}, page_content='. ere is also a procedural "pylab" interface based on astate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is designed to beas usable as MATLAB 5.1.4: torchvision: -The torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision. Used for transforming image into tensors,for working with class and image'), Document(metadata={}, page_content='.  PLANT LEAF DISEASE DETECTION  Importing modules 5.2 Exploring the data: 5.3 Data preparation for training: torchvision.datasets is a class which helps in loading all common and famous datasets. It also helps in loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading the image data when the data is arranged in this way:  PLANT LEAF DISEASE DETECTION  root/dog/xxx.png root/dog/xxy.png root/dog/xxz.png root/cat/123.png root/cat/nsdf3'), Document(metadata={}, page_content='.png root/cat/123.png root/cat/nsdf3.png root/cat/asd932_.png -Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural networks works quite good with normalized data. The entire array of pixel values is converted to torch tensor and then divided by 255. 5'), Document(metadata={}, page_content='. 5.4: Modelling: It is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized for general purpose and GPUs are optimized for training deep learning models as they can process multiple computations simultaneously. They have a large number of cores, which allows for better computation of multiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of data — this makes a GPU’s memory bandwidth most suitable'), Document(metadata={}, page_content='. To seamlessly use a GPU, if one is available, we define a couple of helper functions (get_default_device & to_device) and a helper class DeviceDataLoader to move our model & data to the GPU as required 5.5 Building Architecture: We are going to use ResNet, one of the major breakthrough in computer vision since they were introduced in 2015'), Document(metadata={}, page_content='. In ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to avoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks'), Document(metadata={}, page_content='. Here is a simple residual block:  PLANT LEAF DISEASE DETECTION  5.6: Building Final architecture of our model: 5.7: Training the Model: -Training -Gradient Clipping -Recording and updating learning rate -Validation  PLANT LEAF DISEASE DETECTION  CHAPTER 6: RESULTS 6.1:Accuracy vs No of epochs: 6.2:Loss vs No. of epochs  PLANT LEAF DISEASE DETECTION  6.3:Accuracy: 6.3: Images of first batch of Training:  PLANT LEAF DISEASE DETECTION  6.4: Output:  PLANT LEAF DISEASE DETECTION  REFERENCES [1]'), Document(metadata={}, page_content='. https://towardsdatascience.com/understanding-and-visualizing-resnets- [2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 [3]. https://jovian.ai/aakashns/05b-cifar10-resnet [4]. https://pytorch.org/ [5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A dataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, Hyderabad, India. https://doi.org/10.1145/3371158'), Document(metadata={}, page_content='. https://doi.org/10.1145/3371158.3371196 [6]. BhangeManisha et al. Smart farming: Pomegranate disease detection using image processing Procedia Comput. Sci. (2015) [7]. LiuWeibo et al. A survey of deep neural network architectures and their applications Neurocomputing (2017) [8]. HarakannanavarSunil S. et al. Plant leaf disease detection using computer vision and machine learning algorithms Glob. Transitions Proc. (2022)')]
Documents after splitting: [Document(metadata={}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease'), Document(metadata={}, page_content='. With the worldwide increase in digital cameras and continuous improvements in computer vision domain, the automated techniques for detection of disease are highly in demands in precision agriculture. Working on a dataset w hich includes images of crop leaves, a Residual Network was trained to perform this task of classification, The proposed ResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the proposed model'), Document(metadata={}, page_content='. Overall the process of tra ining ResNet models on an open image dataset provides a sound way towards crop disease detection using automated networks on an enormous global scale. Providing the user -friendly website for leaf disease detection to farmers  PLANT LEAF DISEASE DETECTION  Table of Contents PROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 CHAPTER 1: INTRODUCTION ..........'), Document(metadata={}, page_content='... ......... 3 CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................ 4 CHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ ..................... 5 CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ..........................'), Document(metadata={}, page_content='....................... ........................... 6 CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ ............................. 9 CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................ 10 CHAPTER 6: RESULTS ................................ ................................ ................................ ................................ ...'), Document(metadata={}, page_content='............. ................................ .......... 14 REFERENCES ................................ ................................ ................................ ................................ ........................'), Document(metadata={}, page_content='......................... ......................... 17  PLANT LEAF DISEASE DETECTION  PROBLEM STATEMENT Plant Leaf Disease Detection using PyTorch and Deep Learning  PLANT LEAF DISEASE DETECTION  CHAPTER 1: INTRODUCTION In agricultural crops, leaves play a vital role to provide information about the amount and nature of horticultural yield. Several factors affect food production such as climate change, presence of weed, and soil infertility'), Document(metadata={}, page_content='. Apart from that, plant or leaf disease is a global threat to the growth of several agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus in plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been largely considered in the scientific community, with a focus on the biological features of diseases. Precision farming uses the most advanced technology for the optimization of decision -making'), Document(metadata={}, page_content='. The visual inspections by experts and biological review are usually carried out through plant diagnosis when required. This method, however, is typically time -consuming and cost ineffective. To address these issues, it is necessary to detect plant diseases by advanced and intelligent techniques As a solution to this problem, we have devised a system that uses deep learning to analyze, detect and classify any disease that might have affected a plant by taking an image of the leaf'), Document(metadata={}, page_content='. The processing pipeline goes as follows: 1. The leaf is detected in the given image and cropped out 2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to 3. The leaf is then checked for the disease class, if any, based on the result it displays  PLANT LEAF DISEASE DETECTION  CHAPTER 2: LITERATURE SURVEY Kaiming He et al., (2015) Proposed on " Deep Residual Learning for Image Recognition " Deeper neural networks are more difficult to train'), Document(metadata={}, page_content='. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth'), Document(metadata={}, page_content='. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. BAOQI LI et al'), Document(metadata={}, page_content='. BAOQI LI et al.,( 2018), proposed work on "An Improved ResNet Based on the Adjustable Shortcut Connections" In this paper, ResNet can achieve deeper network and higher performance, but there is no good explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is not reasonable to adopt identity mapping for all layer parameters'), Document(metadata={}, page_content='. In this paper, we first establish a simplified ResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. Heechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and localization methods using real traffic surveillance recordings'), Document(metadata={}, page_content='. We utilize a MIOvision traffic dataset, which comprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on. Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification Based on CNN " early detection of diseases is important in agriculture for an efficient crop yield. bacterial spot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes'), Document(metadata={}, page_content='. Automatic methods for classification of plant diseases also help taking action after detecting the symptoms of leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector Quantization (LVQ) algorithm base method for tomato leaf disease detection and classification. dataset contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for automatic feature extraction and classification'), Document(metadata={}, page_content='. Color information is actively used for plant leaf disease researches. In our model, the filters are applied to three channels based on RGB components.  PLANT LEAF DISEASE DETECTION  CHAPTER 3: DETAILED DESIGN 3.1: ARCHITECTURE DIAGRAM: Architecture Diagram Description: 1.Data set: We have collected a Data set having different plants and its variety of diseases for each plant along with the healthy leaf images 2'), Document(metadata={}, page_content='.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation data set respectively. 3'), Document(metadata={}, page_content='. 3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks. 4'), Document(metadata={}, page_content='. 4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is used to check how much the model is learned from training data set and to finding the accuracy of predicting the input image. 5.input image is converted into array and passed to the model having resnet architecture which has been trained by the data set and get predictions from the model, picks index with highest probability and prints the class label  PLANT LEAF DISEASE DETECTION  3'), Document(metadata={}, page_content='.2: ResNet ARCHITECTURE: ResNet Architecture  PLANT LEAF DISEASE DETECTION  Description: Since neural networks are good function approximators, they should be able to easily solve the identify function, where the output of a function becomes the input itself'), Document(metadata={}, page_content='. F(x)=x Following the same logic, if we bypass the input to the first layer of the model to be the output of the last layer of the model, the network should be able to predict whatever function it was learning before with the input added to it. F(x) + x = h(x) One of the problems ResNets solve is the famous known vanishing gradient'), Document(metadata={}, page_content='. This is because when the network is too deep, the gradients from where the loss function is calculated easily shrink to zero after several applications of the chain rule. This result on the weights never updating its values and therefore, no learning is being performed. With ResNets, the gradients can flow directly through the skip connections backwards from later layers to initial filters. 3'), Document(metadata={}, page_content='. 3.1: USECASE DIAGRAM: Use Case -Diagram  PLANT LEAF DISEASE DETECTION  CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS 4.1 -Functional Requirements : \uf0b7 User Level: 1. User shall be able to input test data (image). 2. User shall be able to perform analysis after the results. 3. User shall be able to train the data if required. 4. User shall be able to view the result \uf0b7 System Level: 1. System should provide option to input the test image. 2. System should provide option to display results. 3'), Document(metadata={}, page_content='. 3. System should accept the input. 4. System should predict the output. 5. System should display result. 6. System should provide the option for user’s to retrain. 4.2-Nonfunctional Requirements: 1.Portability: The program should be platform Independent 2.Usability: The system should be easy to deal and simple to understand 3.Speed and Response: Execution of the operations must be in seconds 4.Flexibility: The system should be easy to modify 5'), Document(metadata={}, page_content='.Accuracy and Precision : The system should perform its process with accuracy and precision to avoid problems 4.3- Software and Hardware Requirements: 1. A computer with at least 2 virtual core processor, at least 4 GB RAM, ideally having a dedicated GPU. 2. Any of these Python IDLE -Jupiter Notebook, Pycharm with Pre-installed necessary libraries and modules. 3. Google Colab to design these models.  PLANT LEAF DISEASE DETECTION  CHAPTER 5: IMPLEMENTATION 5.1 INCORPORATED PACKAGE: 5.1'), Document(metadata={}, page_content='.1 INCORPORATED PACKAGE: 5.1.1: Pytorch : -PyTorch is a python package that provides two high-level features: - Tensor computation (like numpy) with strong GPU acceleration - Deep Neural Networks built on a tape-based autograd system You can reuse your favorite python packages such as numpy, scipy and Cython to extend PyTorch when needed. -Usually one uses PyTorch either as: - A replacement for numpy to use the power of GPUs'), Document(metadata={}, page_content=". - a deep learning research platform that provides maximum flexibility and speed -It provides a wide variety of tensor routines to accelerate and fit your scientific computation needs such as slicing, indexing, math operations, linear algebra, reductions. And they are fast 5.1.2: torchsummary: - Torch-summary provides information complementary to what is provided by print(your model) in PyTorch, similar to Tensorflow's model"), Document(metadata={}, page_content='.summary() API to view the visualization of the model, which is helpful while debugging your network. In this project, we implement a similar functionality in PyTorch and create a clean, simple interface to use in your projects. 5.1.3: Matplotlib.pyplot: -Matplotlib is a plotting library for the Python programming language and its numericalmathematics extension NumPy'), Document(metadata={}, page_content='. ere is also a procedural "pylab" interface based on astate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is designed to beas usable as MATLAB 5.1.4: torchvision: -The torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision. Used for transforming image into tensors,for working with class and image'), Document(metadata={}, page_content='.  PLANT LEAF DISEASE DETECTION  Importing modules 5.2 Exploring the data: 5.3 Data preparation for training: torchvision.datasets is a class which helps in loading all common and famous datasets. It also helps in loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading the image data when the data is arranged in this way:  PLANT LEAF DISEASE DETECTION  root/dog/xxx.png root/dog/xxy.png root/dog/xxz.png root/cat/123.png root/cat/nsdf3'), Document(metadata={}, page_content='.png root/cat/123.png root/cat/nsdf3.png root/cat/asd932_.png -Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural networks works quite good with normalized data. The entire array of pixel values is converted to torch tensor and then divided by 255. 5'), Document(metadata={}, page_content='. 5.4: Modelling: It is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized for general purpose and GPUs are optimized for training deep learning models as they can process multiple computations simultaneously. They have a large number of cores, which allows for better computation of multiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of data — this makes a GPU’s memory bandwidth most suitable'), Document(metadata={}, page_content='. To seamlessly use a GPU, if one is available, we define a couple of helper functions (get_default_device & to_device) and a helper class DeviceDataLoader to move our model & data to the GPU as required 5.5 Building Architecture: We are going to use ResNet, one of the major breakthrough in computer vision since they were introduced in 2015'), Document(metadata={}, page_content='. In ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to avoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks'), Document(metadata={}, page_content='. Here is a simple residual block:  PLANT LEAF DISEASE DETECTION  5.6: Building Final architecture of our model: 5.7: Training the Model: -Training -Gradient Clipping -Recording and updating learning rate -Validation  PLANT LEAF DISEASE DETECTION  CHAPTER 6: RESULTS 6.1:Accuracy vs No of epochs: 6.2:Loss vs No. of epochs  PLANT LEAF DISEASE DETECTION  6.3:Accuracy: 6.3: Images of first batch of Training:  PLANT LEAF DISEASE DETECTION  6.4: Output:  PLANT LEAF DISEASE DETECTION  REFERENCES [1]'), Document(metadata={}, page_content='. https://towardsdatascience.com/understanding-and-visualizing-resnets- [2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 [3]. https://jovian.ai/aakashns/05b-cifar10-resnet [4]. https://pytorch.org/ [5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A dataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, Hyderabad, India. https://doi.org/10.1145/3371158'), Document(metadata={}, page_content='. https://doi.org/10.1145/3371158.3371196 [6]. BhangeManisha et al. Smart farming: Pomegranate disease detection using image processing Procedia Comput. Sci. (2015) [7]. LiuWeibo et al. A survey of deep neural network architectures and their applications Neurocomputing (2017) [8]. HarakannanavarSunil S. et al. Plant leaf disease detection using computer vision and machine learning algorithms Glob. Transitions Proc. (2022)')]
Old FAISS index directory removed.
Old FAISS index directory removed.
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x000001371952ECF0>
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x000001371952ECF0>
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x00000137191BA490>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x00000137191B1D10>, root_client=<openai.OpenAI object at 0x000001377E87F610>, root_async_client=<openai.AsyncOpenAI object at 0x00000137191BA5D0>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x00000137191BA490>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x00000137191B1D10>, root_client=<openai.OpenAI object at 0x000001377E87F610>, root_async_client=<openai.AsyncOpenAI object at 0x00000137191BA5D0>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x000001371952ECF0>, search_kwargs={})
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x00000137191BA490>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x00000137191B1D10>, root_client=<openai.OpenAI object at 0x000001377E87F610>, root_async_client=<openai.AsyncOpenAI object at 0x00000137191BA5D0>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x00000137191BA490>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x00000137191B1D10>, root_client=<openai.OpenAI object at 0x000001377E87F610>, root_async_client=<openai.AsyncOpenAI object at 0x00000137191BA5D0>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x000001371952ECF0>, search_kwargs={})
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Number of pages loaded: 19
Number of pages loaded: 19
Cleaned text:  VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the aw
Cleaned text:  VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the aw
Documents with metadata: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease')]
Documents with metadata: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. With the worldwide increase in digital cameras and continuous improvements in computer vision domain, the automated techniques for detection of disease are highly in demands in precision agriculture. Working on a dataset w hich includes images of crop leaves, a Residual Network was trained to perform this task of classification, The proposed ResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the proposed model'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Overall the process of tra ining ResNet models on an open image dataset provides a sound way towards crop disease detection using automated networks on an enormous global scale. Providing the user -friendly website for leaf disease detection to farmers  PLANT LEAF DISEASE DETECTION  Table of Contents PROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 CHAPTER 1: INTRODUCTION ..........'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='... ......... 3 CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................ 4 CHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ ..................... 5 CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ..........................'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='....................... ........................... 6 CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ ............................. 9 CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................ 10 CHAPTER 6: RESULTS ................................ ................................ ................................ ................................ ...'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='............. ................................ .......... 14 REFERENCES ................................ ................................ ................................ ................................ ........................'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='......................... ......................... 17  PLANT LEAF DISEASE DETECTION  PROBLEM STATEMENT Plant Leaf Disease Detection using PyTorch and Deep Learning  PLANT LEAF DISEASE DETECTION  CHAPTER 1: INTRODUCTION In agricultural crops, leaves play a vital role to provide information about the amount and nature of horticultural yield. Several factors affect food production such as climate change, presence of weed, and soil infertility'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Apart from that, plant or leaf disease is a global threat to the growth of several agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus in plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been largely considered in the scientific community, with a focus on the biological features of diseases. Precision farming uses the most advanced technology for the optimization of decision -making'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The visual inspections by experts and biological review are usually carried out through plant diagnosis when required. This method, however, is typically time -consuming and cost ineffective. To address these issues, it is necessary to detect plant diseases by advanced and intelligent techniques As a solution to this problem, we have devised a system that uses deep learning to analyze, detect and classify any disease that might have affected a plant by taking an image of the leaf'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The processing pipeline goes as follows: 1. The leaf is detected in the given image and cropped out 2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to 3. The leaf is then checked for the disease class, if any, based on the result it displays  PLANT LEAF DISEASE DETECTION  CHAPTER 2: LITERATURE SURVEY Kaiming He et al., (2015) Proposed on " Deep Residual Learning for Image Recognition " Deeper neural networks are more difficult to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. BAOQI LI et al'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. BAOQI LI et al.,( 2018), proposed work on "An Improved ResNet Based on the Adjustable Shortcut Connections" In this paper, ResNet can achieve deeper network and higher performance, but there is no good explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is not reasonable to adopt identity mapping for all layer parameters'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. In this paper, we first establish a simplified ResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. Heechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and localization methods using real traffic surveillance recordings'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. We utilize a MIOvision traffic dataset, which comprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on. Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification Based on CNN " early detection of diseases is important in agriculture for an efficient crop yield. bacterial spot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Automatic methods for classification of plant diseases also help taking action after detecting the symptoms of leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector Quantization (LVQ) algorithm base method for tomato leaf disease detection and classification. dataset contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for automatic feature extraction and classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Color information is actively used for plant leaf disease researches. In our model, the filters are applied to three channels based on RGB components.  PLANT LEAF DISEASE DETECTION  CHAPTER 3: DETAILED DESIGN 3.1: ARCHITECTURE DIAGRAM: Architecture Diagram Description: 1.Data set: We have collected a Data set having different plants and its variety of diseases for each plant along with the healthy leaf images 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation data set respectively. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks. 4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is used to check how much the model is learned from training data set and to finding the accuracy of predicting the input image. 5.input image is converted into array and passed to the model having resnet architecture which has been trained by the data set and get predictions from the model, picks index with highest probability and prints the class label  PLANT LEAF DISEASE DETECTION  3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.2: ResNet ARCHITECTURE: ResNet Architecture  PLANT LEAF DISEASE DETECTION  Description: Since neural networks are good function approximators, they should be able to easily solve the identify function, where the output of a function becomes the input itself'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. F(x)=x Following the same logic, if we bypass the input to the first layer of the model to be the output of the last layer of the model, the network should be able to predict whatever function it was learning before with the input added to it. F(x) + x = h(x) One of the problems ResNets solve is the famous known vanishing gradient'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. This is because when the network is too deep, the gradients from where the loss function is calculated easily shrink to zero after several applications of the chain rule. This result on the weights never updating its values and therefore, no learning is being performed. With ResNets, the gradients can flow directly through the skip connections backwards from later layers to initial filters. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3.1: USECASE DIAGRAM: Use Case -Diagram  PLANT LEAF DISEASE DETECTION  CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS 4.1 -Functional Requirements : \uf0b7 User Level: 1. User shall be able to input test data (image). 2. User shall be able to perform analysis after the results. 3. User shall be able to train the data if required. 4. User shall be able to view the result \uf0b7 System Level: 1. System should provide option to input the test image. 2. System should provide option to display results. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3. System should accept the input. 4. System should predict the output. 5. System should display result. 6. System should provide the option for user’s to retrain. 4.2-Nonfunctional Requirements: 1.Portability: The program should be platform Independent 2.Usability: The system should be easy to deal and simple to understand 3.Speed and Response: Execution of the operations must be in seconds 4.Flexibility: The system should be easy to modify 5'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.Accuracy and Precision : The system should perform its process with accuracy and precision to avoid problems 4.3- Software and Hardware Requirements: 1. A computer with at least 2 virtual core processor, at least 4 GB RAM, ideally having a dedicated GPU. 2. Any of these Python IDLE -Jupiter Notebook, Pycharm with Pre-installed necessary libraries and modules. 3. Google Colab to design these models.  PLANT LEAF DISEASE DETECTION  CHAPTER 5: IMPLEMENTATION 5.1 INCORPORATED PACKAGE: 5.1'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.1 INCORPORATED PACKAGE: 5.1.1: Pytorch : -PyTorch is a python package that provides two high-level features: - Tensor computation (like numpy) with strong GPU acceleration - Deep Neural Networks built on a tape-based autograd system You can reuse your favorite python packages such as numpy, scipy and Cython to extend PyTorch when needed. -Usually one uses PyTorch either as: - A replacement for numpy to use the power of GPUs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content=". - a deep learning research platform that provides maximum flexibility and speed -It provides a wide variety of tensor routines to accelerate and fit your scientific computation needs such as slicing, indexing, math operations, linear algebra, reductions. And they are fast 5.1.2: torchsummary: - Torch-summary provides information complementary to what is provided by print(your model) in PyTorch, similar to Tensorflow's model"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.summary() API to view the visualization of the model, which is helpful while debugging your network. In this project, we implement a similar functionality in PyTorch and create a clean, simple interface to use in your projects. 5.1.3: Matplotlib.pyplot: -Matplotlib is a plotting library for the Python programming language and its numericalmathematics extension NumPy'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. ere is also a procedural "pylab" interface based on astate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is designed to beas usable as MATLAB 5.1.4: torchvision: -The torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision. Used for transforming image into tensors,for working with class and image'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.  PLANT LEAF DISEASE DETECTION  Importing modules 5.2 Exploring the data: 5.3 Data preparation for training: torchvision.datasets is a class which helps in loading all common and famous datasets. It also helps in loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading the image data when the data is arranged in this way:  PLANT LEAF DISEASE DETECTION  root/dog/xxx.png root/dog/xxy.png root/dog/xxz.png root/cat/123.png root/cat/nsdf3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.png root/cat/123.png root/cat/nsdf3.png root/cat/asd932_.png -Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural networks works quite good with normalized data. The entire array of pixel values is converted to torch tensor and then divided by 255. 5'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 5.4: Modelling: It is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized for general purpose and GPUs are optimized for training deep learning models as they can process multiple computations simultaneously. They have a large number of cores, which allows for better computation of multiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of data — this makes a GPU’s memory bandwidth most suitable'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. To seamlessly use a GPU, if one is available, we define a couple of helper functions (get_default_device & to_device) and a helper class DeviceDataLoader to move our model & data to the GPU as required 5.5 Building Architecture: We are going to use ResNet, one of the major breakthrough in computer vision since they were introduced in 2015'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. In ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to avoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Here is a simple residual block:  PLANT LEAF DISEASE DETECTION  5.6: Building Final architecture of our model: 5.7: Training the Model: -Training -Gradient Clipping -Recording and updating learning rate -Validation  PLANT LEAF DISEASE DETECTION  CHAPTER 6: RESULTS 6.1:Accuracy vs No of epochs: 6.2:Loss vs No. of epochs  PLANT LEAF DISEASE DETECTION  6.3:Accuracy: 6.3: Images of first batch of Training:  PLANT LEAF DISEASE DETECTION  6.4: Output:  PLANT LEAF DISEASE DETECTION  REFERENCES [1]'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. https://towardsdatascience.com/understanding-and-visualizing-resnets- [2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 [3]. https://jovian.ai/aakashns/05b-cifar10-resnet [4]. https://pytorch.org/ [5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A dataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, Hyderabad, India. https://doi.org/10.1145/3371158'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. https://doi.org/10.1145/3371158.3371196 [6]. BhangeManisha et al. Smart farming: Pomegranate disease detection using image processing Procedia Comput. Sci. (2015) [7]. LiuWeibo et al. A survey of deep neural network architectures and their applications Neurocomputing (2017) [8]. HarakannanavarSunil S. et al. Plant leaf disease detection using computer vision and machine learning algorithms Glob. Transitions Proc. (2022)')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. With the worldwide increase in digital cameras and continuous improvements in computer vision domain, the automated techniques for detection of disease are highly in demands in precision agriculture. Working on a dataset w hich includes images of crop leaves, a Residual Network was trained to perform this task of classification, The proposed ResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the proposed model'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Overall the process of tra ining ResNet models on an open image dataset provides a sound way towards crop disease detection using automated networks on an enormous global scale. Providing the user -friendly website for leaf disease detection to farmers  PLANT LEAF DISEASE DETECTION  Table of Contents PROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 CHAPTER 1: INTRODUCTION ..........'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='... ......... 3 CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................ 4 CHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ ..................... 5 CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ..........................'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='....................... ........................... 6 CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ ............................. 9 CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................ 10 CHAPTER 6: RESULTS ................................ ................................ ................................ ................................ ...'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='............. ................................ .......... 14 REFERENCES ................................ ................................ ................................ ................................ ........................'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='......................... ......................... 17  PLANT LEAF DISEASE DETECTION  PROBLEM STATEMENT Plant Leaf Disease Detection using PyTorch and Deep Learning  PLANT LEAF DISEASE DETECTION  CHAPTER 1: INTRODUCTION In agricultural crops, leaves play a vital role to provide information about the amount and nature of horticultural yield. Several factors affect food production such as climate change, presence of weed, and soil infertility'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Apart from that, plant or leaf disease is a global threat to the growth of several agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus in plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been largely considered in the scientific community, with a focus on the biological features of diseases. Precision farming uses the most advanced technology for the optimization of decision -making'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The visual inspections by experts and biological review are usually carried out through plant diagnosis when required. This method, however, is typically time -consuming and cost ineffective. To address these issues, it is necessary to detect plant diseases by advanced and intelligent techniques As a solution to this problem, we have devised a system that uses deep learning to analyze, detect and classify any disease that might have affected a plant by taking an image of the leaf'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The processing pipeline goes as follows: 1. The leaf is detected in the given image and cropped out 2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to 3. The leaf is then checked for the disease class, if any, based on the result it displays  PLANT LEAF DISEASE DETECTION  CHAPTER 2: LITERATURE SURVEY Kaiming He et al., (2015) Proposed on " Deep Residual Learning for Image Recognition " Deeper neural networks are more difficult to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. BAOQI LI et al'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. BAOQI LI et al.,( 2018), proposed work on "An Improved ResNet Based on the Adjustable Shortcut Connections" In this paper, ResNet can achieve deeper network and higher performance, but there is no good explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is not reasonable to adopt identity mapping for all layer parameters'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. In this paper, we first establish a simplified ResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. Heechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and localization methods using real traffic surveillance recordings'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. We utilize a MIOvision traffic dataset, which comprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on. Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification Based on CNN " early detection of diseases is important in agriculture for an efficient crop yield. bacterial spot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Automatic methods for classification of plant diseases also help taking action after detecting the symptoms of leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector Quantization (LVQ) algorithm base method for tomato leaf disease detection and classification. dataset contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for automatic feature extraction and classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Color information is actively used for plant leaf disease researches. In our model, the filters are applied to three channels based on RGB components.  PLANT LEAF DISEASE DETECTION  CHAPTER 3: DETAILED DESIGN 3.1: ARCHITECTURE DIAGRAM: Architecture Diagram Description: 1.Data set: We have collected a Data set having different plants and its variety of diseases for each plant along with the healthy leaf images 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation data set respectively. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks. 4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is used to check how much the model is learned from training data set and to finding the accuracy of predicting the input image. 5.input image is converted into array and passed to the model having resnet architecture which has been trained by the data set and get predictions from the model, picks index with highest probability and prints the class label  PLANT LEAF DISEASE DETECTION  3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.2: ResNet ARCHITECTURE: ResNet Architecture  PLANT LEAF DISEASE DETECTION  Description: Since neural networks are good function approximators, they should be able to easily solve the identify function, where the output of a function becomes the input itself'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. F(x)=x Following the same logic, if we bypass the input to the first layer of the model to be the output of the last layer of the model, the network should be able to predict whatever function it was learning before with the input added to it. F(x) + x = h(x) One of the problems ResNets solve is the famous known vanishing gradient'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. This is because when the network is too deep, the gradients from where the loss function is calculated easily shrink to zero after several applications of the chain rule. This result on the weights never updating its values and therefore, no learning is being performed. With ResNets, the gradients can flow directly through the skip connections backwards from later layers to initial filters. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3.1: USECASE DIAGRAM: Use Case -Diagram  PLANT LEAF DISEASE DETECTION  CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS 4.1 -Functional Requirements : \uf0b7 User Level: 1. User shall be able to input test data (image). 2. User shall be able to perform analysis after the results. 3. User shall be able to train the data if required. 4. User shall be able to view the result \uf0b7 System Level: 1. System should provide option to input the test image. 2. System should provide option to display results. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3. System should accept the input. 4. System should predict the output. 5. System should display result. 6. System should provide the option for user’s to retrain. 4.2-Nonfunctional Requirements: 1.Portability: The program should be platform Independent 2.Usability: The system should be easy to deal and simple to understand 3.Speed and Response: Execution of the operations must be in seconds 4.Flexibility: The system should be easy to modify 5'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.Accuracy and Precision : The system should perform its process with accuracy and precision to avoid problems 4.3- Software and Hardware Requirements: 1. A computer with at least 2 virtual core processor, at least 4 GB RAM, ideally having a dedicated GPU. 2. Any of these Python IDLE -Jupiter Notebook, Pycharm with Pre-installed necessary libraries and modules. 3. Google Colab to design these models.  PLANT LEAF DISEASE DETECTION  CHAPTER 5: IMPLEMENTATION 5.1 INCORPORATED PACKAGE: 5.1'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.1 INCORPORATED PACKAGE: 5.1.1: Pytorch : -PyTorch is a python package that provides two high-level features: - Tensor computation (like numpy) with strong GPU acceleration - Deep Neural Networks built on a tape-based autograd system You can reuse your favorite python packages such as numpy, scipy and Cython to extend PyTorch when needed. -Usually one uses PyTorch either as: - A replacement for numpy to use the power of GPUs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content=". - a deep learning research platform that provides maximum flexibility and speed -It provides a wide variety of tensor routines to accelerate and fit your scientific computation needs such as slicing, indexing, math operations, linear algebra, reductions. And they are fast 5.1.2: torchsummary: - Torch-summary provides information complementary to what is provided by print(your model) in PyTorch, similar to Tensorflow's model"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.summary() API to view the visualization of the model, which is helpful while debugging your network. In this project, we implement a similar functionality in PyTorch and create a clean, simple interface to use in your projects. 5.1.3: Matplotlib.pyplot: -Matplotlib is a plotting library for the Python programming language and its numericalmathematics extension NumPy'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. ere is also a procedural "pylab" interface based on astate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is designed to beas usable as MATLAB 5.1.4: torchvision: -The torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision. Used for transforming image into tensors,for working with class and image'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.  PLANT LEAF DISEASE DETECTION  Importing modules 5.2 Exploring the data: 5.3 Data preparation for training: torchvision.datasets is a class which helps in loading all common and famous datasets. It also helps in loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading the image data when the data is arranged in this way:  PLANT LEAF DISEASE DETECTION  root/dog/xxx.png root/dog/xxy.png root/dog/xxz.png root/cat/123.png root/cat/nsdf3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.png root/cat/123.png root/cat/nsdf3.png root/cat/asd932_.png -Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural networks works quite good with normalized data. The entire array of pixel values is converted to torch tensor and then divided by 255. 5'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 5.4: Modelling: It is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized for general purpose and GPUs are optimized for training deep learning models as they can process multiple computations simultaneously. They have a large number of cores, which allows for better computation of multiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of data — this makes a GPU’s memory bandwidth most suitable'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. To seamlessly use a GPU, if one is available, we define a couple of helper functions (get_default_device & to_device) and a helper class DeviceDataLoader to move our model & data to the GPU as required 5.5 Building Architecture: We are going to use ResNet, one of the major breakthrough in computer vision since they were introduced in 2015'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. In ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to avoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Here is a simple residual block:  PLANT LEAF DISEASE DETECTION  5.6: Building Final architecture of our model: 5.7: Training the Model: -Training -Gradient Clipping -Recording and updating learning rate -Validation  PLANT LEAF DISEASE DETECTION  CHAPTER 6: RESULTS 6.1:Accuracy vs No of epochs: 6.2:Loss vs No. of epochs  PLANT LEAF DISEASE DETECTION  6.3:Accuracy: 6.3: Images of first batch of Training:  PLANT LEAF DISEASE DETECTION  6.4: Output:  PLANT LEAF DISEASE DETECTION  REFERENCES [1]'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. https://towardsdatascience.com/understanding-and-visualizing-resnets- [2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 [3]. https://jovian.ai/aakashns/05b-cifar10-resnet [4]. https://pytorch.org/ [5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A dataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, Hyderabad, India. https://doi.org/10.1145/3371158'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. https://doi.org/10.1145/3371158.3371196 [6]. BhangeManisha et al. Smart farming: Pomegranate disease detection using image processing Procedia Comput. Sci. (2015) [7]. LiuWeibo et al. A survey of deep neural network architectures and their applications Neurocomputing (2017) [8]. HarakannanavarSunil S. et al. Plant leaf disease detection using computer vision and machine learning algorithms Glob. Transitions Proc. (2022)')]
Old FAISS index directory removed.
Old FAISS index directory removed.
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Data loaded: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 0}, page_content=' \n \n VISVESVARAYA TECHNOLOGICAL UNIVERSITY, \nBELGAUM, KARNATAKA \n \n PROJECT REPORT  \n \nON \n \n“PLANT LEAF DISEASE DETECTION” \n \nSubmitted in partial fulfillment of the requirement for the award of the degree of \n \nBACHELOR OF ENGINEERING \nIN \nCOMPUTER SCIENCE AND ENGINEERING \n \nSubmitted by \n \nUSN NAME \n \n         2SD17CS108                TEJAS M P \n                                                                      2SD17CS044                MANOJ C NAIK \n                  2SD17CS066                PRASHANT KALLI \n 2SD17CS072                RAHUL A \n            \nUnder the Guidance of \nDr. U P Kulkarni.  \nDept. of CSE, SDMCET, Dharwad \n \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \nS.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD-580002 \n2020-2021\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 1}, page_content=' \n \n \nS.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, \nDHARWAD –580002 \n \n \nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING \n \nCERTIFICATE  \n \nCertified that the project work and presentation entitled  “PLANT LEAF \nDISEASE DETECTION ” is a bonafide work carried out by  TEJAS M P \n(2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), \nand MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering \n& Technology, Dharwad, in partial fulfil lment for the award of  Bachelor of \nEngineering in Computer Science and Engineering  of Visvesvaraya \nTechnological University , Belgaum, during the year 2020 -2021. It is certified that \nall corrections/suggestions indicated for internal a ssessment have been \nincorporated in the report deposited in the department library. The Project has been \napproved, as it satisfies the academic r equirements in respect of project report  \nprescribed for the said degree. \n \n \n \nDr. U P Kulkarni                 \nProject Guide and HoD-CSE                  \nExternal Viva \nName of Examiners      Signature with date \n1. _____________________ \n2. ___________________\n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 2}, page_content=' \nPage 1 of 19 \n \n \nABSTRACT \n \nCrop disease is a serious concern for safety of food, but its fast detection still remains \ndifficult in different parts of the lack of proper infrastructure Automatic identification of \nplant disease is necessary for food security, yield loss esti mation and management of \ndisease. With the worldwide increase in digital cameras and continuous improvements in \ncomputer vision domain, the automated techniques for detection of disease are highly in \ndemands in precision agriculture. Working on a dataset w hich includes images of crop \nleaves, a Residual Network was trained to perform this task of classification, The proposed \nResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the \nproposed model. Overall the process of tra ining ResNet models on an open image dataset \nprovides a sound way towards crop disease detection using automated networks on an \nenormous global scale. Providing the user -friendly website for leaf disease detection to \nfarmers \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 3}, page_content='PLANT LEAF DISEASE DETECTION \nPage 2 of 17 \n \n \nTable of Contents \n \nPROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 \nCHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................  4 \nCHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ .....................  5 \nCHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ...........................  6 \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ .............................  9 \nCHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................  10 \nCHAPTER 6: RESULTS ................................ ................................ ................................ ................................ .......... 14 \nREFERENCES ................................ ................................ ................................ ................................ .........................  17 \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 4}, page_content='PLANT LEAF DISEASE DETECTION \nPage 3 of 17 \n \n \n \nPROBLEM STATEMENT \n \nPlant Leaf Disease Detection using PyTorch and Deep Learning \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 5}, page_content='PLANT LEAF DISEASE DETECTION \nPage 4 of 17 \n \n \nCHAPTER 1: INTRODUCTION \n \n In agricultural crops, leaves play a vital role to provide information about the amount and nature of \nhorticultural yield. Several factors affect food production such as climate change, presence of weed, and \nsoil infertility. Apart from that, plant or leaf disease is a global threat to the growth of several \nagricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus \nin plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been \nlargely considered in the scientific community, with a focus on the biological features of diseases. \nPrecision farming uses the most advanced technology for the optimization of decision -making. The \nvisual inspections by experts and biological review are usually carried out through plant diagnosis when \nrequired. This method, however, is typically time -consuming and cost ineffective. To address these \nissues, it is necessary to detect plant diseases by advanced and intelligent techniques \n \nAs a solution to  this  problem,  we  have  devised  a  system  that  uses  deep  learning  to  analyze, \ndetect  and classify  any disease  that might have  affected  a plant by  taking  an image of  the leaf.  The \nprocessing pipeline goes as follows:  \n1. The leaf is detected in the given image and cropped out \n2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to  \n3. The leaf is then checked for the disease class, if any, based on the result it displays \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 6}, page_content='PLANT LEAF DISEASE DETECTION \nPage 5 of 17 \n \n \nCHAPTER 2: LITERATURE SURVEY \n \n Kaiming He et al.,  (2015) Proposed on " Deep Residual Learning for Image Recognition  " Deeper \nneural networks are more difficult to train. We present a residual learning framework to ease the training of \nnetworks that are substantially deeper than those used previously. We explicitly reformulate the layers as \nlearning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We \nprovide comprehensive empirical evidence showing that these residual networks are easier to optimize, and \ncan gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets \nwith a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble \nof these residual nets achieves 3.57% error on the ImageNet test set.  \n \nBAOQI LI et al.,( 2018), proposed work on  "An Improved ResNet Based on the Adjustable Shortcut \nConnections" In this paper, ResNet can achieve deeper network and higher performance, but there is no \ngood explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is \nnot reasonable to adopt identity mapping for all layer parameters. In this paper, we first establish a simplified \nResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. \n \nHeechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in \nTraffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and \nlocalization methods using real traffic surveillance recordings. We utilize a MIOvision traffic dataset, which \ncomprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on.  \n \n Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification \nBased on CNN "  early detection of diseases is important in agriculture for an efficient crop yield.  bacterial \nspot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes. \nAutomatic methods for classification of plant diseases also help taking action after detecting the symptoms \nof leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector \nQuantization (LVQ) algorithm base method for tomato leaf  disease detection and classification.  dataset \ncontains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for \nautomatic feature extraction and classification. Color information is actively used for plant leaf disease \nresearches. In our model, the filters are applied to three channels based on RGB components. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 7}, page_content='PLANT LEAF DISEASE DETECTION \nPage 6 of 17 \n \n \nCHAPTER 3: DETAILED DESIGN  \n \n3.1: ARCHITECTURE DIAGRAM: \n \n \n \n  Architecture Diagram \nDescription: \n1.Data set: We have collected a Data set having different plants and its variety of diseases for each \nplant along with the healthy leaf images \n2.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation \ndata set respectively.  \n3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the \nnext layer, we use a network with residual blocks, each layer feeds into the next layer and directly \ninto the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop \ndecreasing at a point and then keeps increasing while training loss still decreases). This also helps in \npreventing vanishing gradient problem and allow us to train deep neural networks. \n4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is \nused to check how much the model is learned from training data set and to finding the accuracy of \npredicting the input image. \n5.input image is converted into array and passed to the model having resnet architecture which has \nbeen trained by the data set and get predictions from the model, picks index with highest probability \nand prints the class label  \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 8}, page_content='PLANT LEAF DISEASE DETECTION \nPage 7 of 17 \n \n \n3.2: ResNet ARCHITECTURE: \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n                                      \n \n     \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n            \n                              \n \n                       ResNet Architecture \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 9}, page_content='PLANT LEAF DISEASE DETECTION \nPage 8 of 17 \n \n \nDescription: \nSince neural networks are good function approximators, they should be able to easily solve the identify \nfunction, where the output of a function becomes the input itself. \nF(x)=x  \n \nFollowing the same logic, if we bypass the input to the first layer of the model to be the output of the \nlast layer of the model, the network should be able to predict whatever function it was learning before with \nthe input added to it. \n   F(x) + x = h(x) \nOne of the problems ResNets solve is the famous known  vanishing gradient. This is because when \nthe network is too deep, the gradients from where the loss function is calculated easily shrink to zero after \nseveral applications of the chain rule. This result on the weights never updating its values  and therefore, no \nlearning is being performed. \nWith ResNets, the gradients can flow directly through the skip connections backwards from later \nlayers to initial filters. \n \n3.1: USECASE DIAGRAM: \n                                \n                Use Case -Diagram \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 10}, page_content='PLANT LEAF DISEASE DETECTION \nPage 9 of 17 \n \n \nCHAPTER 4: PROJECT SPECIFIC REQUIREMENTS \n \n4.1 -Functional Requirements : \n\uf0b7 User Level: \n1. User shall be able to input test data (image). \n2. User shall be able to perform analysis after the results. \n3. User shall be able to train the data if required. \n4. User shall be able to view the result \n \n\uf0b7 System Level: \n1. System should provide option to input the test image. \n2. System should provide option to display results. \n3. System should accept the input. \n4. System should predict the output. \n5. System should display result.  \n6. System should provide the option for user’s to retrain. \n \n4.2-Nonfunctional Requirements:   \n  1.Portability: The program should be platform Independent \n  2.Usability: The system should be easy to deal and simple to understand \n  3.Speed and Response: Execution of the operations must be in seconds \n  4.Flexibility: The system should be easy to modify \n5.Accuracy and Precision : The system should perform its process with accuracy and                     \nprecision to avoid problems \n \n4.3- Software and Hardware Requirements: \n1. A computer with at least 2 virtual core processor, at least 4 GB RAM,  ideally having a dedicated        \nGPU. \n \n2. Any of these Python IDLE -Jupiter Notebook, Pycharm with  Pre-installed necessary libraries  and \nmodules.  \n \n3. Google Colab to design these models. \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 11}, page_content='PLANT LEAF DISEASE DETECTION \nPage 10 of 17 \n \n \nCHAPTER 5: IMPLEMENTATION \n \n5.1 INCORPORATED PACKAGE: \n 5.1.1: Pytorch : \n-PyTorch is a python package that provides two high-level features: - \nTensor computation (like numpy) with strong GPU acceleration - Deep \nNeural Networks built on a tape-based autograd system \nYou can reuse your favorite python packages such as numpy, scipy and \nCython to extend PyTorch when needed. \n-Usually one uses PyTorch either as: \n                     - A replacement for numpy to use the power of GPUs. \n                     - a deep learning research platform that provides maximum flexibility \n                        and speed \n-It provides a wide variety of tensor routines to accelerate and fit your \nscientific computation needs such as slicing, indexing, math operations, \nlinear algebra, reductions. And they are fast \n 5.1.2:  torchsummary: \n- Torch-summary provides information complementary to what is provided by print(your \nmodel)  in PyTorch, similar to Tensorflow\'s model.summary() API to view the visualization \nof the model, which is helpful while debugging your network. In this project, we implement a \nsimilar functionality in PyTorch and create a clean, simple interface to use in your projects. \n 5.1.3:  Matplotlib.pyplot:  \n-Matplotlib is a plotting library for the Python programming language and its \nnumericalmathematics extension NumPy.  ere is also a procedural "pylab" interface based on \nastate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. \nPyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is \ndesigned to beas usable as MATLAB \n 5.1.4: torchvision: \n-The torchvision package consists of popular datasets, model architectures, and common \nimage transformations for computer vision. Used for transforming image into tensors,for \nworking with class and image. \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 12}, page_content='PLANT LEAF DISEASE DETECTION \nPage 11 of 17 \n \n \n \n     Importing modules \n \n5.2 Exploring the data:  \n \n \n \n \n5.3 Data preparation for training:  \n \n  \n \ntorchvision.datasets is a class which helps in loading all common and famous datasets. It also helps \nin loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading \nthe image data when the data is arranged in this way: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 13}, page_content='PLANT LEAF DISEASE DETECTION \nPage 12 of 17 \n \n \nroot/dog/xxx.png \nroot/dog/xxy.png \nroot/dog/xxz.png \n \nroot/cat/123.png \nroot/cat/nsdf3.png \nroot/cat/asd932_.png \n \n \n-Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural \nnetworks works quite good with normalized data. The entire array of pixel values is converted to \ntorch tensor and then divided by 255.   \n \n5.4: Modelling: \nIt is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized \nfor general purpose and GPUs are optimized for training deep learning models as they can process multiple \ncomputations simultaneously. They have a large number of cores, which allows for better computation of \nmultiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of \ndata — this makes a GPU’s memory bandwidth most suitable. To seamlessly use a GPU, if one is available, \nwe define a couple of helper functions (get_default_device & to_device) and a helper \nclass DeviceDataLoader to move our model & data to the GPU as required \n \n5.5 Building Architecture: \n \nWe are going to use   ResNet,  one of the major breakthrough in computer vision since they were introduced \nin 2015. \nIn ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with \nresidual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to \navoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while \ntraining loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train \ndeep neural networks. Here is a simple residual block: \n \n \n '), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 14}, page_content='PLANT LEAF DISEASE DETECTION \nPage 13 of 17 \n \n \n \n5.6: Building Final architecture of our model: \n \n \n \n  \n5.7: Training the Model: \n -Training \n -Gradient Clipping \n -Recording and updating learning rate \n -Validation \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 15}, page_content='PLANT LEAF DISEASE DETECTION \nPage 14 of 17 \n \n \nCHAPTER 6: RESULTS \n \n 6.1:Accuracy vs No of epochs: \n \n \n \n6.2:Loss vs No. of epochs \n \n                \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 16}, page_content='PLANT LEAF DISEASE DETECTION \nPage 15 of 17 \n \n \n6.3:Accuracy: \n       \n \n \n \n \n6.3: Images of first batch of Training: \n \n \n \n \n \n \n \n \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 17}, page_content='PLANT LEAF DISEASE DETECTION \nPage 16 of 17 \n \n \n6.4:  Output: \n \n \n \n \n'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf', 'page': 18}, page_content='PLANT LEAF DISEASE DETECTION \nPage 17 of 17 \n \n \nREFERENCES \n \n[1]. https://towardsdatascience.com/understanding-and-visualizing-resnets-  \n[2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 \n [3]. https://jovian.ai/aakashns/05b-cifar10-resnet \n[4]. https://pytorch.org/ \n[5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A \ndataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, \nHyderabad, India. \n https://doi.org/10.1145/3371158.3371196 \n [6]. BhangeManisha et al. \nSmart farming: Pomegranate disease detection using image processing \nProcedia Comput. Sci. \n(2015) \n \n[7]. LiuWeibo et al. \nA survey of deep neural network architectures and their applications \nNeurocomputing \n(2017) \n \n[8]. HarakannanavarSunil S. et al. \nPlant leaf disease detection using computer vision and machine learning algorithms \nGlob. Transitions Proc. \n(2022) \n \n')]
Number of pages loaded: 19
Number of pages loaded: 19
Cleaned text:  VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the aw
Cleaned text:  VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the aw
Documents with metadata: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease')]
Documents with metadata: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. With the worldwide increase in digital cameras and continuous improvements in computer vision domain, the automated techniques for detection of disease are highly in demands in precision agriculture. Working on a dataset w hich includes images of crop leaves, a Residual Network was trained to perform this task of classification, The proposed ResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the proposed model'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Overall the process of tra ining ResNet models on an open image dataset provides a sound way towards crop disease detection using automated networks on an enormous global scale. Providing the user -friendly website for leaf disease detection to farmers  PLANT LEAF DISEASE DETECTION  Table of Contents PROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 CHAPTER 1: INTRODUCTION ..........'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='... ......... 3 CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................ 4 CHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ ..................... 5 CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ..........................'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='....................... ........................... 6 CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ ............................. 9 CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................ 10 CHAPTER 6: RESULTS ................................ ................................ ................................ ................................ ...'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='............. ................................ .......... 14 REFERENCES ................................ ................................ ................................ ................................ ........................'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='......................... ......................... 17  PLANT LEAF DISEASE DETECTION  PROBLEM STATEMENT Plant Leaf Disease Detection using PyTorch and Deep Learning  PLANT LEAF DISEASE DETECTION  CHAPTER 1: INTRODUCTION In agricultural crops, leaves play a vital role to provide information about the amount and nature of horticultural yield. Several factors affect food production such as climate change, presence of weed, and soil infertility'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Apart from that, plant or leaf disease is a global threat to the growth of several agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus in plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been largely considered in the scientific community, with a focus on the biological features of diseases. Precision farming uses the most advanced technology for the optimization of decision -making'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The visual inspections by experts and biological review are usually carried out through plant diagnosis when required. This method, however, is typically time -consuming and cost ineffective. To address these issues, it is necessary to detect plant diseases by advanced and intelligent techniques As a solution to this problem, we have devised a system that uses deep learning to analyze, detect and classify any disease that might have affected a plant by taking an image of the leaf'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The processing pipeline goes as follows: 1. The leaf is detected in the given image and cropped out 2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to 3. The leaf is then checked for the disease class, if any, based on the result it displays  PLANT LEAF DISEASE DETECTION  CHAPTER 2: LITERATURE SURVEY Kaiming He et al., (2015) Proposed on " Deep Residual Learning for Image Recognition " Deeper neural networks are more difficult to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. BAOQI LI et al'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. BAOQI LI et al.,( 2018), proposed work on "An Improved ResNet Based on the Adjustable Shortcut Connections" In this paper, ResNet can achieve deeper network and higher performance, but there is no good explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is not reasonable to adopt identity mapping for all layer parameters'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. In this paper, we first establish a simplified ResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. Heechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and localization methods using real traffic surveillance recordings'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. We utilize a MIOvision traffic dataset, which comprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on. Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification Based on CNN " early detection of diseases is important in agriculture for an efficient crop yield. bacterial spot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Automatic methods for classification of plant diseases also help taking action after detecting the symptoms of leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector Quantization (LVQ) algorithm base method for tomato leaf disease detection and classification. dataset contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for automatic feature extraction and classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Color information is actively used for plant leaf disease researches. In our model, the filters are applied to three channels based on RGB components.  PLANT LEAF DISEASE DETECTION  CHAPTER 3: DETAILED DESIGN 3.1: ARCHITECTURE DIAGRAM: Architecture Diagram Description: 1.Data set: We have collected a Data set having different plants and its variety of diseases for each plant along with the healthy leaf images 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation data set respectively. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks. 4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is used to check how much the model is learned from training data set and to finding the accuracy of predicting the input image. 5.input image is converted into array and passed to the model having resnet architecture which has been trained by the data set and get predictions from the model, picks index with highest probability and prints the class label  PLANT LEAF DISEASE DETECTION  3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.2: ResNet ARCHITECTURE: ResNet Architecture  PLANT LEAF DISEASE DETECTION  Description: Since neural networks are good function approximators, they should be able to easily solve the identify function, where the output of a function becomes the input itself'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. F(x)=x Following the same logic, if we bypass the input to the first layer of the model to be the output of the last layer of the model, the network should be able to predict whatever function it was learning before with the input added to it. F(x) + x = h(x) One of the problems ResNets solve is the famous known vanishing gradient'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. This is because when the network is too deep, the gradients from where the loss function is calculated easily shrink to zero after several applications of the chain rule. This result on the weights never updating its values and therefore, no learning is being performed. With ResNets, the gradients can flow directly through the skip connections backwards from later layers to initial filters. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3.1: USECASE DIAGRAM: Use Case -Diagram  PLANT LEAF DISEASE DETECTION  CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS 4.1 -Functional Requirements : \uf0b7 User Level: 1. User shall be able to input test data (image). 2. User shall be able to perform analysis after the results. 3. User shall be able to train the data if required. 4. User shall be able to view the result \uf0b7 System Level: 1. System should provide option to input the test image. 2. System should provide option to display results. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3. System should accept the input. 4. System should predict the output. 5. System should display result. 6. System should provide the option for user’s to retrain. 4.2-Nonfunctional Requirements: 1.Portability: The program should be platform Independent 2.Usability: The system should be easy to deal and simple to understand 3.Speed and Response: Execution of the operations must be in seconds 4.Flexibility: The system should be easy to modify 5'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.Accuracy and Precision : The system should perform its process with accuracy and precision to avoid problems 4.3- Software and Hardware Requirements: 1. A computer with at least 2 virtual core processor, at least 4 GB RAM, ideally having a dedicated GPU. 2. Any of these Python IDLE -Jupiter Notebook, Pycharm with Pre-installed necessary libraries and modules. 3. Google Colab to design these models.  PLANT LEAF DISEASE DETECTION  CHAPTER 5: IMPLEMENTATION 5.1 INCORPORATED PACKAGE: 5.1'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.1 INCORPORATED PACKAGE: 5.1.1: Pytorch : -PyTorch is a python package that provides two high-level features: - Tensor computation (like numpy) with strong GPU acceleration - Deep Neural Networks built on a tape-based autograd system You can reuse your favorite python packages such as numpy, scipy and Cython to extend PyTorch when needed. -Usually one uses PyTorch either as: - A replacement for numpy to use the power of GPUs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content=". - a deep learning research platform that provides maximum flexibility and speed -It provides a wide variety of tensor routines to accelerate and fit your scientific computation needs such as slicing, indexing, math operations, linear algebra, reductions. And they are fast 5.1.2: torchsummary: - Torch-summary provides information complementary to what is provided by print(your model) in PyTorch, similar to Tensorflow's model"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.summary() API to view the visualization of the model, which is helpful while debugging your network. In this project, we implement a similar functionality in PyTorch and create a clean, simple interface to use in your projects. 5.1.3: Matplotlib.pyplot: -Matplotlib is a plotting library for the Python programming language and its numericalmathematics extension NumPy'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. ere is also a procedural "pylab" interface based on astate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is designed to beas usable as MATLAB 5.1.4: torchvision: -The torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision. Used for transforming image into tensors,for working with class and image'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.  PLANT LEAF DISEASE DETECTION  Importing modules 5.2 Exploring the data: 5.3 Data preparation for training: torchvision.datasets is a class which helps in loading all common and famous datasets. It also helps in loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading the image data when the data is arranged in this way:  PLANT LEAF DISEASE DETECTION  root/dog/xxx.png root/dog/xxy.png root/dog/xxz.png root/cat/123.png root/cat/nsdf3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.png root/cat/123.png root/cat/nsdf3.png root/cat/asd932_.png -Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural networks works quite good with normalized data. The entire array of pixel values is converted to torch tensor and then divided by 255. 5'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 5.4: Modelling: It is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized for general purpose and GPUs are optimized for training deep learning models as they can process multiple computations simultaneously. They have a large number of cores, which allows for better computation of multiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of data — this makes a GPU’s memory bandwidth most suitable'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. To seamlessly use a GPU, if one is available, we define a couple of helper functions (get_default_device & to_device) and a helper class DeviceDataLoader to move our model & data to the GPU as required 5.5 Building Architecture: We are going to use ResNet, one of the major breakthrough in computer vision since they were introduced in 2015'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. In ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to avoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Here is a simple residual block:  PLANT LEAF DISEASE DETECTION  5.6: Building Final architecture of our model: 5.7: Training the Model: -Training -Gradient Clipping -Recording and updating learning rate -Validation  PLANT LEAF DISEASE DETECTION  CHAPTER 6: RESULTS 6.1:Accuracy vs No of epochs: 6.2:Loss vs No. of epochs  PLANT LEAF DISEASE DETECTION  6.3:Accuracy: 6.3: Images of first batch of Training:  PLANT LEAF DISEASE DETECTION  6.4: Output:  PLANT LEAF DISEASE DETECTION  REFERENCES [1]'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. https://towardsdatascience.com/understanding-and-visualizing-resnets- [2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 [3]. https://jovian.ai/aakashns/05b-cifar10-resnet [4]. https://pytorch.org/ [5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A dataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, Hyderabad, India. https://doi.org/10.1145/3371158'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. https://doi.org/10.1145/3371158.3371196 [6]. BhangeManisha et al. Smart farming: Pomegranate disease detection using image processing Procedia Comput. Sci. (2015) [7]. LiuWeibo et al. A survey of deep neural network architectures and their applications Neurocomputing (2017) [8]. HarakannanavarSunil S. et al. Plant leaf disease detection using computer vision and machine learning algorithms Glob. Transitions Proc. (2022)')]
Documents after splitting: [Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='VISVESVARAYA TECHNOLOGICAL UNIVERSITY, BELGAUM, KARNATAKA PROJECT REPORT ON “PLANT LEAF DISEASE DETECTION” Submitted in partial fulfillment of the requirement for the award of the degree of BACHELOR OF ENGINEERING IN COMPUTER SCIENCE AND ENGINEERING Submitted by USN NAME 2SD17CS108 TEJAS M P 2SD17CS044 MANOJ C NAIK 2SD17CS066 PRASHANT KALLI 2SD17CS072 RAHUL A Under the Guidance of Dr. U P Kulkarni. Dept. of CSE, SDMCET, Dharwad DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING S.D.M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.D.M. COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD-580002 2020-2021   S.D.M COLLEGE OF ENGINEERING & TECHNOLOGY, DHARWAD –580002 DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING CERTIFICATE Certified that the project work and presentation entitled “PLANT LEAF DISEASE DETECTION ” is a bonafide work carried out by TEJAS M P (2SD17CS108) PRASHANT KALLI (2SD17CS066), RAHUL A (2SD17CS072), and MANOJ C NAIK (2SD17CS044) , students of S. D. M'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. D. M. College of Engineering & Technology, Dharwad, in partial fulfil lment for the award of Bachelor of Engineering in Computer Science and Engineering of Visvesvaraya Technological University , Belgaum, during the year 2020 -2021. It is certified that all corrections/suggestions indicated for internal a ssessment have been incorporated in the report deposited in the department library'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The Project has been approved, as it satisfies the academic r equirements in respect of project report prescribed for the said degree. Dr. U P Kulkarni Project Guide and HoD-CSE External Viva Name of Examiners Signature with date 1. _____________________ 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. _____________________ 2. ___________________    ABSTRACT Crop disease is a serious concern for safety of food, but its fast detection still remains difficult in different parts of the lack of proper infrastructure Automatic identification of plant disease is necessary for food security, yield loss esti mation and management of disease'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. With the worldwide increase in digital cameras and continuous improvements in computer vision domain, the automated techniques for detection of disease are highly in demands in precision agriculture. Working on a dataset w hich includes images of crop leaves, a Residual Network was trained to perform this task of classification, The proposed ResNet model accomplished a 99.40% accuracy on a test set, illustrating the viability of the proposed model'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Overall the process of tra ining ResNet models on an open image dataset provides a sound way towards crop disease detection using automated networks on an enormous global scale. Providing the user -friendly website for leaf disease detection to farmers  PLANT LEAF DISEASE DETECTION  Table of Contents PROBLEM STATEMENT ................................ ................................ ................................ ................................ ......... 3 CHAPTER 1: INTRODUCTION ..........'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='... ......... 3 CHAPTER 1: INTRODUCTION ................................ ................................ ................................ ................................ 4 CHAPTER 2: LITERATURE SURVEY ................................ ................................ ................................ ..................... 5 CHAPTER 3: DETAILED DESIGN ................................ ................................ ................................ ..........................'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='....................... ........................... 6 CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS ................................ ................................ ............................. 9 CHAPTER 5: IMPLEMENTATION ................................ ................................ ................................ ........................ 10 CHAPTER 6: RESULTS ................................ ................................ ................................ ................................ ...'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='............. ................................ .......... 14 REFERENCES ................................ ................................ ................................ ................................ ........................'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='......................... ......................... 17  PLANT LEAF DISEASE DETECTION  PROBLEM STATEMENT Plant Leaf Disease Detection using PyTorch and Deep Learning  PLANT LEAF DISEASE DETECTION  CHAPTER 1: INTRODUCTION In agricultural crops, leaves play a vital role to provide information about the amount and nature of horticultural yield. Several factors affect food production such as climate change, presence of weed, and soil infertility'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Apart from that, plant or leaf disease is a global threat to the growth of several agricultural products and a source of economic losses. The failure to diagnose infections/bacteria/virus in plants leads subsequently to insufficient pesticide/fungicide use . Therefore, plant diseases have been largely considered in the scientific community, with a focus on the biological features of diseases. Precision farming uses the most advanced technology for the optimization of decision -making'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The visual inspections by experts and biological review are usually carried out through plant diagnosis when required. This method, however, is typically time -consuming and cost ineffective. To address these issues, it is necessary to detect plant diseases by advanced and intelligent techniques As a solution to this problem, we have devised a system that uses deep learning to analyze, detect and classify any disease that might have affected a plant by taking an image of the leaf'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. The processing pipeline goes as follows: 1. The leaf is detected in the given image and cropped out 2. The extracted leaf is then run through a classifier to identify which plant the leaf belongs to 3. The leaf is then checked for the disease class, if any, based on the result it displays  PLANT LEAF DISEASE DETECTION  CHAPTER 2: LITERATURE SURVEY Kaiming He et al., (2015) Proposed on " Deep Residual Learning for Image Recognition " Deeper neural networks are more difficult to train'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers —8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. BAOQI LI et al'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. BAOQI LI et al.,( 2018), proposed work on "An Improved ResNet Based on the Adjustable Shortcut Connections" In this paper, ResNet can achieve deeper network and higher performance, but there is no good explanation for how identity short cut connections solve the gradient fading problems. Moreover, it is not reasonable to adopt identity mapping for all layer parameters'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. In this paper, we first establish a simplified ResNet that is similar to the ResNet in principle, and deduce the back propagation of the networks. Heechul Jung et al.,(2017), proposed work on" ResNet-Based Vehicle Classification and Localization in Traffic Surveillance Systems " In this paper, we present ResNet -based vehicle classification and localization methods using real traffic surveillance recordings'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. We utilize a MIOvision traffic dataset, which comprises 11 categories including a variety of vehicles, such as bicycle, bus, car, motorcycle, and so on. Melike Sardogan et al.,( 2018), proposed work on " Plant Leaf Dise ase Detection and Classification Based on CNN " early detection of diseases is important in agriculture for an efficient crop yield. bacterial spot, late blight, septoria leaf spot and yellow curved leaf diseases affect the crop quality of tomatoes'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Automatic methods for classification of plant diseases also help taking action after detecting the symptoms of leaf diseases. paper presents a Convolutional Neural Network (CNN) model and Learning Vector Quantization (LVQ) algorithm base method for tomato leaf disease detection and classification. dataset contains 500 images of tomato leaves with four symptoms of diseases. We have modeled a CNN for automatic feature extraction and classification'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Color information is actively used for plant leaf disease researches. In our model, the filters are applied to three channels based on RGB components.  PLANT LEAF DISEASE DETECTION  CHAPTER 3: DETAILED DESIGN 3.1: ARCHITECTURE DIAGRAM: Architecture Diagram Description: 1.Data set: We have collected a Data set having different plants and its variety of diseases for each plant along with the healthy leaf images 2'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.Splitting Data: splitting of collected Data set into 80% and 20% as training Dataset and Validation data set respectively. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3.ResNet Architecture: In ResNets, unlike in traditiona l neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2 –3 hops away, to avoid over -fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks. 4'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 4.Train/Validate Model : Training Data set is used to train the model, and Validation Data set is used to check how much the model is learned from training data set and to finding the accuracy of predicting the input image. 5.input image is converted into array and passed to the model having resnet architecture which has been trained by the data set and get predictions from the model, picks index with highest probability and prints the class label  PLANT LEAF DISEASE DETECTION  3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.2: ResNet ARCHITECTURE: ResNet Architecture  PLANT LEAF DISEASE DETECTION  Description: Since neural networks are good function approximators, they should be able to easily solve the identify function, where the output of a function becomes the input itself'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. F(x)=x Following the same logic, if we bypass the input to the first layer of the model to be the output of the last layer of the model, the network should be able to predict whatever function it was learning before with the input added to it. F(x) + x = h(x) One of the problems ResNets solve is the famous known vanishing gradient'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. This is because when the network is too deep, the gradients from where the loss function is calculated easily shrink to zero after several applications of the chain rule. This result on the weights never updating its values and therefore, no learning is being performed. With ResNets, the gradients can flow directly through the skip connections backwards from later layers to initial filters. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3.1: USECASE DIAGRAM: Use Case -Diagram  PLANT LEAF DISEASE DETECTION  CHAPTER 4: PROJECT SPECIFIC REQUIREMENTS 4.1 -Functional Requirements : \uf0b7 User Level: 1. User shall be able to input test data (image). 2. User shall be able to perform analysis after the results. 3. User shall be able to train the data if required. 4. User shall be able to view the result \uf0b7 System Level: 1. System should provide option to input the test image. 2. System should provide option to display results. 3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 3. System should accept the input. 4. System should predict the output. 5. System should display result. 6. System should provide the option for user’s to retrain. 4.2-Nonfunctional Requirements: 1.Portability: The program should be platform Independent 2.Usability: The system should be easy to deal and simple to understand 3.Speed and Response: Execution of the operations must be in seconds 4.Flexibility: The system should be easy to modify 5'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.Accuracy and Precision : The system should perform its process with accuracy and precision to avoid problems 4.3- Software and Hardware Requirements: 1. A computer with at least 2 virtual core processor, at least 4 GB RAM, ideally having a dedicated GPU. 2. Any of these Python IDLE -Jupiter Notebook, Pycharm with Pre-installed necessary libraries and modules. 3. Google Colab to design these models.  PLANT LEAF DISEASE DETECTION  CHAPTER 5: IMPLEMENTATION 5.1 INCORPORATED PACKAGE: 5.1'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.1 INCORPORATED PACKAGE: 5.1.1: Pytorch : -PyTorch is a python package that provides two high-level features: - Tensor computation (like numpy) with strong GPU acceleration - Deep Neural Networks built on a tape-based autograd system You can reuse your favorite python packages such as numpy, scipy and Cython to extend PyTorch when needed. -Usually one uses PyTorch either as: - A replacement for numpy to use the power of GPUs'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content=". - a deep learning research platform that provides maximum flexibility and speed -It provides a wide variety of tensor routines to accelerate and fit your scientific computation needs such as slicing, indexing, math operations, linear algebra, reductions. And they are fast 5.1.2: torchsummary: - Torch-summary provides information complementary to what is provided by print(your model) in PyTorch, similar to Tensorflow's model"), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.summary() API to view the visualization of the model, which is helpful while debugging your network. In this project, we implement a similar functionality in PyTorch and create a clean, simple interface to use in your projects. 5.1.3: Matplotlib.pyplot: -Matplotlib is a plotting library for the Python programming language and its numericalmathematics extension NumPy'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. ere is also a procedural "pylab" interface based on astate machine (like OpenGL Matplotlib), designed to closely resemble that of MATLAB. Pyplot is a Matplotlib module which provides a MATLAB-like interface. Matplotlib is designed to beas usable as MATLAB 5.1.4: torchvision: -The torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision. Used for transforming image into tensors,for working with class and image'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.  PLANT LEAF DISEASE DETECTION  Importing modules 5.2 Exploring the data: 5.3 Data preparation for training: torchvision.datasets is a class which helps in loading all common and famous datasets. It also helps in loading custom datasets. I have used subclass torchvision.datasets. ImageFolder which helps in loading the image data when the data is arranged in this way:  PLANT LEAF DISEASE DETECTION  root/dog/xxx.png root/dog/xxy.png root/dog/xxz.png root/cat/123.png root/cat/nsdf3'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='.png root/cat/123.png root/cat/nsdf3.png root/cat/asd932_.png -Next, after loading the data, we need to transform the pixel values of each image (0-255) to 0-1 as neural networks works quite good with normalized data. The entire array of pixel values is converted to torch tensor and then divided by 255. 5'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. 5.4: Modelling: It is advisable to use GPU instead of CPU when dealing with images dataset because CPUs are generalized for general purpose and GPUs are optimized for training deep learning models as they can process multiple computations simultaneously. They have a large number of cores, which allows for better computation of multiple parallel processes. Additionally, computations in deep learning need to handle huge amounts of data — this makes a GPU’s memory bandwidth most suitable'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. To seamlessly use a GPU, if one is available, we define a couple of helper functions (get_default_device & to_device) and a helper class DeviceDataLoader to move our model & data to the GPU as required 5.5 Building Architecture: We are going to use ResNet, one of the major breakthrough in computer vision since they were introduced in 2015'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. In ResNets, unlike in traditional neural networks, each layer feeds into the next layer, we use a network with residual blocks, each layer feeds into the next layer and directly into the layers about 2–3 hops away, to avoid over-fitting (a situation when validation loss stop decreasing at a point and then keeps increasing while training loss still decreases). This also helps in preventing vanishing gradient problem and allow us to train deep neural networks'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. Here is a simple residual block:  PLANT LEAF DISEASE DETECTION  5.6: Building Final architecture of our model: 5.7: Training the Model: -Training -Gradient Clipping -Recording and updating learning rate -Validation  PLANT LEAF DISEASE DETECTION  CHAPTER 6: RESULTS 6.1:Accuracy vs No of epochs: 6.2:Loss vs No. of epochs  PLANT LEAF DISEASE DETECTION  6.3:Accuracy: 6.3: Images of first batch of Training:  PLANT LEAF DISEASE DETECTION  6.4: Output:  PLANT LEAF DISEASE DETECTION  REFERENCES [1]'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. https://towardsdatascience.com/understanding-and-visualizing-resnets- [2]. https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035 [3]. https://jovian.ai/aakashns/05b-cifar10-resnet [4]. https://pytorch.org/ [5]. Singh, D., Jain, N., Jain, P., Kayal, P., Kumawat, S., and Batra, N. (2020, January 5–7). PlantDoc: A dataset for visual plant disease detection. Proceedings of the 7th ACM IKDD CoDS and 25th COMAD, Hyderabad, India. https://doi.org/10.1145/3371158'), Document(metadata={'source': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}, page_content='. https://doi.org/10.1145/3371158.3371196 [6]. BhangeManisha et al. Smart farming: Pomegranate disease detection using image processing Procedia Comput. Sci. (2015) [7]. LiuWeibo et al. A survey of deep neural network architectures and their applications Neurocomputing (2017) [8]. HarakannanavarSunil S. et al. Plant leaf disease detection using computer vision and machine learning algorithms Glob. Transitions Proc. (2022)')]
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x0000014BA94A9D30>
FAISS index created successfully: <langchain_community.vectorstores.faiss.FAISS object at 0x0000014BA94A9D30>
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x0000014BA9124050>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x0000014BA9127890>, root_client=<openai.OpenAI object at 0x0000014BA9134410>, root_async_client=<openai.AsyncOpenAI object at 0x0000014BA9124190>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x0000014BA9124050>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x0000014BA9127890>, root_client=<openai.OpenAI object at 0x0000014BA9134410>, root_async_client=<openai.AsyncOpenAI object at 0x0000014BA9124190>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x0000014BA94A9D30>, search_kwargs={})
QA Chain created successfully: verbose=True combine_documents_chain=MapReduceDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['context', 'question'], input_types={}, partial_variables={}, template='Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x0000014BA9124050>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x0000014BA9127890>, root_client=<openai.OpenAI object at 0x0000014BA9134410>, root_async_client=<openai.AsyncOpenAI object at 0x0000014BA9124190>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), reduce_documents_chain=ReduceDocumentsChain(verbose=False, combine_documents_chain=StuffDocumentsChain(verbose=False, llm_chain=LLMChain(verbose=False, prompt=PromptTemplate(input_variables=['question', 'summaries'], input_types={}, partial_variables={}, template='Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\n\nQUESTION: Which state/country\'s law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\nSource: 28-pl\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.\nSource: 30-pl\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\nSource: 4-pl\n=========\nFINAL ANSWER: This Agreement is governed by English law.\nSOURCES: 28-pl\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\nSource: 0-pl\nContent: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\nSource: 24-pl\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.\nSource: 5-pl\nContent: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.\nSource: 34-pl\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\nSOURCES:\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:'), llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x0000014BA9124050>, async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x0000014BA9127890>, root_client=<openai.OpenAI object at 0x0000014BA9134410>, root_async_client=<openai.AsyncOpenAI object at 0x0000014BA9124190>, model_name='gpt-4o-mini', model_kwargs={}, openai_api_key=SecretStr('**********')), output_parser=StrOutputParser(), llm_kwargs={}), document_prompt=PromptTemplate(input_variables=['page_content', 'source'], input_types={}, partial_variables={}, template='Content: {page_content}\nSource: {source}'), document_variable_name='summaries')), document_variable_name='context') retriever=VectorStoreRetriever(tags=['FAISS', 'OpenAIEmbeddings'], vectorstore=<langchain_community.vectorstores.faiss.FAISS object at 0x0000014BA94A9D30>, search_kwargs={})
Query Result: {'answer': 'The project involves implementing a deep learning research platform using PyTorch that provides maximum flexibility and speed. It aims to create a simple interface to facilitate the use of various tensor routines, which are essential for scientific computations, including operations like slicing, indexing, and linear algebra. Additionally, the project includes a tool called "torchsummary" that offers complementary information to what is typically provided by the model\'s print function in PyTorch.\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Query Result: {'answer': 'The project involves implementing a deep learning research platform using PyTorch that provides maximum flexibility and speed. It aims to create a simple interface to facilitate the use of various tensor routines, which are essential for scientific computations, including operations like slicing, indexing, and linear algebra. Additionally, the project includes a tool called "torchsummary" that offers complementary information to what is typically provided by the model\'s print function in PyTorch.\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
Query Result: {'answer': 'The project involves implementing a deep learning research platform using PyTorch that provides maximum flexibility and speed. It aims to create a simple interface to facilitate the use of various tensor routines, which are essential for scientific computations, including operations like slicing, indexing, and linear algebra. Additionally, the project includes a tool called "torchsummary" that offers complementary information to what is typically provided by the model\'s print function in PyTorch.\n\n', 'sources': 'C:\\Users\\tejas\\Desktop\\myDoc\\Major project-report.pdf'}
